% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bin-utils.R
\name{bin-utils}
\alias{bin-utils}
\alias{bin}
\title{Alternative cut functions}
\usage{
bin(x, breaks = 10, explicit_na = TRUE, ...)
}
\arguments{
\item{x}{numeric vector}

\item{breaks}{a numeric vector of cut points or a single number giving the number of
intervals}

\item{explicit_na}{if \code{TRUE} then NAs after binning are converted to an explici
factor levels using \link[forcats]{fct_explicit_na}}

\item{...}{additional arguments to pass to \link[base]{cut}}

\item{n}{number of intervals}
}
\description{
\code{bin} is equivalent to \link[base]{cut} but uses alternative defaults:
\code{include.lowest = TRUE, right = FALSE, dig.lab = 5}. \cr

\code{bin_pretty} uses \link[base]{pretty} to determine the cut points. \cr

\code{bin_quantile} uses \link[stats]{quantile} to determine the cut points. It works
similarly to \link[ggplot2]{cut_number} but if there is insufficient information for
\code{n} cut points it tries to find a lower value of \code{n} that does not produce an
error. \cr
}
\examples{
\dontrun{

df = data.frame(
  x = rnorm(1000),
  y = sample(1:4, 1000, TRUE),
  z = sample(LETTERS[1:4], 1000, TRUE)
)

df \%>\% pip(bin(x, breaks = 5))
df \%>\% pip(bin_pretty(x))
df \%>\% pip(bin_quantile(x, n = 5))
df \%>\% pip(ggplot2::cut_number(x, n = 5)) # identical

df \%>\% pip(bin(y, breaks = 5))
df \%>\% pip(bin_pretty(y))
df \%>\% pip(bin_quantile(y, n = 5))
df \%>\% pip(ggplot2::cut_number(y, n = 5)) # throws an error

df \%>\% pip(bin(z, breaks = 5))
df \%>\% pip(bin_pretty(z))
df \%>\% pip(bin_quantile(z, n = 5))
}
}
