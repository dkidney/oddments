% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/df-eda.R
\name{df-eda}
\alias{df-eda}
\alias{skim}
\alias{sketch}
\title{Explore a data frame}
\usage{
skim(data, verbose = TRUE)

sketch(data, x, y, group, min_unique_continuous = 10,
  max_unique_discrete = 50, max_distinct_group = 3, x_bins = 30,
  y_method = NULL, y_family = NULL, y_points = NULL, k = 10)
}
\arguments{
\item{data}{a data frame}

\item{verbose}{if \code{TRUE} messages will be printed to the console}

\item{x}{unquoted expression giving the variable to be plotted (can be a combination of
one of more variables in data)}

\item{y}{TODO}

\item{group}{optional grouping variable}

\item{min_unique_continuous}{integer, if \code{x} is non-discrete and the number of
distinct values in \code{x} is less than \code{min_distinct_xnum} a error will be
thrown (see Details)}

\item{max_unique_discrete}{integer, if \code{x} is discrete and the number of distinct
values in \code{x} exceeds \code{max_distinct_xcat} a error will be thrown (see
Details)}

\item{max_distinct_group}{integer, if the number of distinct values in \code{group}
exceeds \code{max_distinct_group} a error will be thrown}

\item{x_bins}{passed to \link[ggplot2]{geom_histogram} (ignored if \code{x} is
discrete)}

\item{y_method}{TODO}

\item{y_family}{TODO}

\item{y_points}{TODO}

\item{k}{TODO}
}
\description{
\itemize{

\item \code{skim()} - returns a \link[dplyr]{tibble} with rows corresponding to the
variables in \code{data} and columns giving values for a range of summary statistics
(the result is returned silently). When \code{verbose = TRUE}, messages are printed
to the console to provide high-level insight and highlight possible issues with data
that might warrent further inspection prior to analysis.

\item \code{sketch()} - plots the distribution of a variable (or combination of
variables) in \code{data} - the relationship with a second variable (or combination
of variables) can be overlayed and faceting by a thrid variable (or combination
of variables) is also possible.

}
}
\details{
\link[dplyr]{type_sum} is used to determine the class of the \code{x}
variable:
\itemize{
\item if \code{x} is one of \code{"chr"}, \code{"fct"}, \code{"lgl"} or
\code{"ord"} then it is treated as discrete
\item if \code{x} is one of \code{"dbl"} or \code{"int"} then it is treated as
non-discrete
\item no other variable types are supported for \code{x}
}

\link[ggplot2]{geom_histogram} is used to plot non-discrete x variables and
\link[ggplot2]{geom_bar} is used to plot discrete x variables.
}
\examples{
\dontrun{

library(tidyverse)
theme_set(theme_oddments())

# iris -----

as_tibble(iris)
results <- skim(iris)
print(results)

iris \%>\% sketch(Sepal.Length)
iris \%>\% sketch(Sepal.Width)
iris \%>\% sketch(Petal.Length)
iris \%>\% sketch(Petal.Length, group = Species)
iris \%>\% sketch(Petal.Length, Petal.Width)
iris \%>\% sketch(Petal.Length, Petal.Width, group = Species)

iris \%>\% sketch(Sepal.Length)

iris \%>\% sketch(Species)
iris \%>\% sketch(Species, Sepal.Length) # fix
iris \%>\% sketch(Species, Sepal.Width) # fix
iris \%>\% sketch(Species, Petal.Length) # fix
iris \%>\% sketch(Species, Petal.Width) # fix
iris \%>\% sketch(Sepal.Length)
iris \%>\% sketch(Sepal.Length, binwidth = 0.5) # fix
iris \%>\% sketch(Sepal.Length, bins = 50) # fix
iris \%>\% sketch(Sepal.Length, breaks = seq(4, 8, 0.25)) # fix
iris \%>\% sketch(Sepal.Length, Sepal.Width)
iris \%>\% sketch(Sepal.Length, Sepal.Width, y_method = "glm", y_points = TRUE)
iris \%>\% sketch(Sepal.Length, Sepal.Width, Species, y_method = "glm")


# mtcars -----

as_tibble(mtcars)
results <- skim(mtcars)
print(results)

mtcars \%>\% sketch(mpg)
mtcars \%>\% sketch(disp)
mtcars \%>\% sketch(mpg, disp)
mtcars \%>\% sketch(mpg, disp, y_method = "glm")
mtcars \%>\% sketch(mpg, disp, y_method = "gam")
mtcars \%>\% sketch(mpg, vs)
mtcars \%>\% sketch(mpg, vs, y_method = "glm")
mtcars \%>\% sketch(mpg, vs, y_method = "gam")

mtcars \%>\% sketch(bin_quantile(mpg, 5))
mtcars \%>\% sketch(bin_quantile(mpg, 100))

mtcars \%>\% sketch(bin_pretty(mpg))
mtcars \%>\% sketch(bin_pretty(mpg), vs, y_method = "glm")
mtcars \%>\% sketch(bin_pretty(mpg), am, y_method = "glm")




as_tibble(esoph)
results <- skim(esoph)
print(results)

as_tibble(attenu)
results <- skim(attenu)
print(results)

nycflights13::airports
results <- skim(nycflights13::airports)
print(results)

nycflights13::planes
results <- skim(nycflights13::planes)
print(results)

nycflights13::weather
results <- skim(nycflights13::weather)
print(results)

nycflights13::flights
results <- skim(nycflights13::flights)
print(results)

ggplot2::theme_set(theme_oddments())

# discrete x
mtcars \%>\% sketch(as.integer(cyl))
mtcars \%>\% sketch(as.character(am))

# continuous x
mtcars \%>\% sketch(mpg)
mtcars \%>\% sketch(log(mpg))
mtcars \%>\% sketch(mpg, x_bins = 3)

# discrete x and continuous y
mtcars \%>\% sketch(as.integer(gear), qsec)

# discrete x, binary y
mtcars \%>\% sketch(as.integer(gear), as.integer(vs))

# continuous x, continuous y
mtcars \%>\% sketch(mpg, disp)
mtcars \%>\% sketch(mpg, disp, y_method = "glm")
mtcars \%>\% sketch(mpg, disp, y_method = "glm", y_points = TRUE)

# continuous x, binary y
mtcars \%>\% sketch(mpg, as.integer(vs))
mtcars \%>\% sketch(mpg, as.integer(vs), bin = TRUE)

mtcars \%>\% sketch(cyl)
mtcars \%>\% sketch(cyl / disp)
mtcars \%>\% sketch(cyl / disp, vs + am)
}
}
